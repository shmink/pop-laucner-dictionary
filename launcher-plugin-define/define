#!/usr/bin/env python3

import json
import os
import sys
import re

def lookup(word):
    response = os.popen(f'dict {word}').read()
    # response numbers all the definitions. For now, I think it's safe to assume the 
    # first definition is the one being looked for. + 3 because '1. ' is 3 chars long
    startLocation = response.find("1. ") + 3
    # At the end of a definition there is commonly '[1913 Webster]' 
    # which realistically I also don't care about
    endLocation = re.search('\[\d{4}', response).start()
    result = response[startLocation:endLocation]
    # return the sliced above string with multiple spaces removed
    return re.sub(' +', ' ', result)

class App(object):

    def __init__(self):
        self.match = None

    def activate(self, index):
        if not self.match:
            return

        sys.stdout.write('"Close"\n')
        sys.stdout.flush()

    def search(self, query):
        self.match = query.split(' ', 1)[1]
        self.match = self.match.capitalize()

        sys.stdout.write(json.dumps({
            'Append': {
                'id': 0,
                'name': f'Define {self.match}',
                'description': f'\n{lookup(self.match)}',
                'keywords': None,
                'icon': None,
                'exec': None,
                'window': None
            }
        }))
        sys.stdout.write('\n')

        sys.stdout.write('"Finished"\n')
        sys.stdout.flush()

# Main Execution

def main():
    app = App()

    for line in sys.stdin:
        try:
            request = json.loads(line)
            if 'Search' in request:
                app.search(request['Search'])
            elif 'Activate' in request:
                app.activate(request['Activate'])
        except json.decoder.JSONDecodeError:
            pass

if __name__ == '__main__':
    main()
